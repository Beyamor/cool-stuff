// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, Game, Marker, Vehicle,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = (function() {

    function Entity(initialX, initialY) {
      this.pos = new Vec2(initialX, initialY);
      this.radius = 32;
    }

    Entity.prototype.update = function(timeDelta) {
      return "Override in subclass";
    };

    Entity.prototype.draw = function(canvas) {
      return "Override in subclass";
    };

    return Entity;

  })();

  Vehicle = (function(_super) {

    __extends(Vehicle, _super);

    function Vehicle(target, bounds, initialX, initialY, settings) {
      this.target = target;
      this.bounds = bounds;
      this.settings = settings;
      Vehicle.__super__.constructor.call(this, initialX, initialY);
      this.vel = new Vec2;
      this.heading = 0;
    }

    Vehicle.prototype.update = function(timeDelta) {
      var acceleration;
      acceleration = this.settings.steerer.force(this, this.target.pos).clamp(this.settings.forSteering.maxForce).scaleBy(this.settings.forEntity.invMass);
      this.vel = this.vel.plus(acceleration.scaleBy(timeDelta)).clamp(this.settings.forEntity.maxSpeed);
      this.pos = this.pos.plus(this.vel.scaleBy(timeDelta));
      if (this.vel.lengthSquared() > 0.0000001) {
        this.heading = this.vel.direction();
      }
      if (this.pos.x + this.radius < 0) {
        this.pos.x = this.bounds.width;
      }
      if (this.pos.y + this.radius < 0) {
        this.pos.y = this.bounds.height;
      }
      if (this.pos.x - this.radius > this.bounds.width) {
        this.pos.x = 0;
      }
      if (this.pos.y - this.radius > this.bounds.height) {
        return this.pos.y = 0;
      }
    };

    Vehicle.prototype.draw = function(canvas) {
      var headLength, tailAngle, tailLength, x, y;
      x = this.pos.x;
      y = this.pos.y;
      if (this.settings.drawBoundingSphere) {
        canvas.outlineCircle(x, y, this.radius, "grey");
      }
      headLength = this.radius;
      tailLength = this.radius - 5;
      tailAngle = 2.2;
      return canvas.drawTriangle([x + Math.cos(this.heading) * headLength, y + Math.sin(this.heading) * headLength], [x + Math.cos(this.heading - tailAngle) * tailLength, y + Math.sin(this.heading - tailAngle) * tailLength], [x + Math.cos(this.heading + tailAngle) * tailLength, y + Math.sin(this.heading + tailAngle) * tailLength], "black");
    };

    return Vehicle;

  })(Entity);

  window.Vehicle = Vehicle;

  Marker = (function(_super) {

    __extends(Marker, _super);

    function Marker(game, initialX, initialY) {
      var mousePos,
        _this = this;
      this.game = game;
      Marker.__super__.constructor.call(this, initialX, initialY);
      this.radius = 16;
      mousePos = function(e) {
        var rect;
        rect = _this.game.canvas.el.getBoundingClientRect();
        return new Vec2(e.clientX - rect.left, e.clientY - rect.top);
      };
      $(this.game.canvas.el).mousedown(function(e) {
        if (mousePos(e).minus(_this.pos).length() <= _this.radius * _this.radius) {
          return _this.isBeingDragged = true;
        }
      }).mouseup(function(e) {
        return _this.isBeingDragged = false;
      });
    }

    Marker.prototype.update = function(timeDelta) {
      if (this.isBeingDragged) {
        return this.pos = this.game.mousePos.clone();
      }
    };

    Marker.prototype.draw = function(canvas) {
      return canvas.outlineCircle(this.pos.x, this.pos.y, this.radius, "#1BA8E0");
    };

    return Marker;

  })(Entity);

  window.Marker = Marker;

  Game = (function() {

    function Game(canvas, settings) {
      var _this = this;
      this.canvas = canvas;
      this.settings = settings;
      this.isPaused = false;
      this.entities = [];
      this.mousePos = new Vec2;
      this.canvas.el.addEventListener('mousemove', function(e) {
        var rect;
        rect = _this.canvas.el.getBoundingClientRect();
        return _this.mousePos = new Vec2(e.clientX - rect.left, e.clientY - rect.top);
      });
    }

    Game.prototype.update = function(timeDelta) {
      var entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.update(timeDelta));
      }
      return _results;
    };

    Game.prototype.draw = function() {
      var entity, _i, _len, _ref, _results;
      this.canvas.clear();
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.draw(this.canvas));
      }
      return _results;
    };

    Game.prototype.run = function() {
      var currentTime,
        _this = this;
      currentTime = new Date().getTime() / 1000;
      return setInterval(function() {
        var previousTime, timeDelta;
        previousTime = currentTime;
        currentTime = new Date().getTime() / 1000;
        timeDelta = currentTime - previousTime;
        if (!_this.isPaused) {
          _this.update(timeDelta);
        }
        return _this.draw();
      }, 16);
    };

    Game.prototype.togglePause = function() {
      return this.isPaused = !this.isPaused;
    };

    return Game;

  })();

  window.Game = Game;

}).call(this);
