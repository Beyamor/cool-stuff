// Generated by CoffeeScript 1.3.3
(function() {
  var Steerer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Steerer = (function() {

    function Steerer(settings) {
      this.settings = settings;
    }

    Steerer.prototype.maxSpeed = function() {
      return this.settings.forEntity.maxSpeed;
    };

    Steerer.prototype.maxForce = function() {
      return this.settings.forSteering.maxForce;
    };

    return Steerer;

  })();

  window.Seeker = (function(_super) {

    __extends(Seeker, _super);

    function Seeker() {
      return Seeker.__super__.constructor.apply(this, arguments);
    }

    Seeker.prototype.force = function(entity, targetPos) {
      var desiredVelocity, force, toTarget;
      toTarget = targetPos.minus(entity.pos);
      desiredVelocity = toTarget.normal().scaleBy(this.maxSpeed());
      force = desiredVelocity.minus(entity.vel);
      return force.clamp(this.maxForce());
    };

    return Seeker;

  })(Steerer);

  window.Arriver = (function(_super) {

    __extends(Arriver, _super);

    function Arriver() {
      return Arriver.__super__.constructor.apply(this, arguments);
    }

    Arriver.prototype.force = function(entity, targetPos) {
      var desiredVelocity, distance, force, speed, toTarget;
      force = new Vec2;
      toTarget = targetPos.minus(entity.pos);
      distance = toTarget.length();
      if (distance > 0) {
        speed = Math.min(this.maxSpeed(), distance * this.settings.forSteering.decceleration);
        desiredVelocity = toTarget.normal().scaleBy(speed);
        force = desiredVelocity.minus(entity.vel);
      }
      return force.clamp(this.maxForce());
    };

    return Arriver;

  })(Steerer);

  window.Wanderer = (function(_super) {

    __extends(Wanderer, _super);

    function Wanderer(settings) {
      this.settings = settings;
      this.angle = 0;
    }

    Wanderer.prototype.force = function(entity, targetPos) {
      var destination, force, jitter, wanderDistance, wanderRadius;
      wanderRadius = this.settings.forSteering.wanderRadius;
      wanderDistance = this.settings.forSteering.wanderDistance;
      jitter = this.settings.forSteering.jitter;
      this.angle += jitter * Math.random() * (Math.random() < 0.5 ? -1 : 1);
      destination = new Vec2(wanderDistance + Math.cos(this.angle) * wanderRadius, Math.sin(this.angle) * wanderRadius);
      destination = destination.rotate(entity.vel.direction()).plus(entity.pos);
      force = destination.minus(entity.pos);
      return force.clamp(this.maxForce());
    };

    return Wanderer;

  })(Steerer);

}).call(this);
